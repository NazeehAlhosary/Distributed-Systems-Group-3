// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "lib/fine.js",[5,6,29,30,32,33,34,35,37,38,41,42,44,45,46,49,50,53,54,54,57,60,72,79]);
_$jscoverage_init(_$jscoverage_cond, "lib/fine.js",[37,44,49,49,54]);
_$jscoverage["lib/fine.js"].source = ["/**"," * Core dependencies."," */","","var fs = require('fs');","var path = require('path');","","/**"," * Find all files in given `location`."," *"," * Features:"," *"," * - Recursive"," * - Sync"," * - Ignore list"," *"," * Options:"," *"," * - ext     Extension"," * - ignore  Patterns to ignore"," *"," * @param {String} path"," * @param {Object} options"," * @returns {Array}"," * @api public"," */","","function fine(location, options) {","  options = options || {};","  location = path.normalize(location);","","  var files = [];","  var ext = options.ext;","  var dir = isDirectory(location) ? fs.readdirSync(location) : [''];","  var ignore = options.ignore || [];","","  if (!Array.isArray(ignore)) {","    ignore = [ignore];","  }","","  dir.forEach(function(file) {","    var full = path.join(location, file);","","    if (isDirectory(location) === true) {","      files = files.concat(fine(full, options));","      return;","    }","","    if (ext && path.extname(full) != ext) {","      return;","    }","","    for (var i = 0, len = ignore.length; i < len; i++) {","      if (new RegExp('^' + ignore[i]).test(full)) return;","    }","","    files.push(full);","  });","","  return files;","}","","/**"," * Check if `path` is a directory."," *"," * @param {String} path"," * @returns {Boolean}"," * @api private"," */","","function isDirectory(path) {","  return fs.statSync(path).isDirectory();","}","","/**"," * Primary export."," */","","module.exports = fine;",""];
_$jscoverage_done("lib/fine.js", 5);
var fs = require("fs");

_$jscoverage_done("lib/fine.js", 6);
var path = require("path");

function fine(location, options) {
    _$jscoverage_done("lib/fine.js", 29);
    options = options || {};
    _$jscoverage_done("lib/fine.js", 30);
    location = path.normalize(location);
    _$jscoverage_done("lib/fine.js", 32);
    var files = [];
    _$jscoverage_done("lib/fine.js", 33);
    var ext = options.ext;
    _$jscoverage_done("lib/fine.js", 34);
    var dir = isDirectory(location) ? fs.readdirSync(location) : [ "" ];
    _$jscoverage_done("lib/fine.js", 35);
    var ignore = options.ignore || [];
    _$jscoverage_done("lib/fine.js", 37);
    if (_$jscoverage_done("lib/fine.js", 37, !Array.isArray(ignore))) {
        _$jscoverage_done("lib/fine.js", 38);
        ignore = [ ignore ];
    }
    _$jscoverage_done("lib/fine.js", 41);
    dir.forEach(function(file) {
        _$jscoverage_done("lib/fine.js", 42);
        var full = path.join(location, file);
        _$jscoverage_done("lib/fine.js", 44);
        if (_$jscoverage_done("lib/fine.js", 44, isDirectory(location) === true)) {
            _$jscoverage_done("lib/fine.js", 45);
            files = files.concat(fine(full, options));
            _$jscoverage_done("lib/fine.js", 46);
            return;
        }
        _$jscoverage_done("lib/fine.js", 49);
        if (_$jscoverage_done("lib/fine.js", 49, ext) && _$jscoverage_done("lib/fine.js", 49, path.extname(full) != ext)) {
            _$jscoverage_done("lib/fine.js", 50);
            return;
        }
        _$jscoverage_done("lib/fine.js", 53);
        for (var i = 0, len = ignore.length; i < len; i++) {
            _$jscoverage_done("lib/fine.js", 54);
            if (_$jscoverage_done("lib/fine.js", 54, (new RegExp("^" + ignore[i])).test(full))) {
                _$jscoverage_done("lib/fine.js", 54);
                return;
            }
        }
        _$jscoverage_done("lib/fine.js", 57);
        files.push(full);
    });
    _$jscoverage_done("lib/fine.js", 60);
    return files;
}

function isDirectory(path) {
    _$jscoverage_done("lib/fine.js", 72);
    return fs.statSync(path).isDirectory();
}

_$jscoverage_done("lib/fine.js", 79);
module.exports = fine;